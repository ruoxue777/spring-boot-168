buildscript {
	group 'org.ruoxue.spring-boot-168'
	version = '0.0.1-SNAPSHOT'
	ext {
		dependencyManagementPluginVersion = '1.0.15.RELEASE'
		commonsLang3Version = '3.8.1'
		springBootVersion = '2.1.7.RELEASE'
		swaggerVersion = '3.0.0'
		knife4jVersion = '3.0.3'
		lombokVersion = '1.18.24'
		springCloudVersion = '2.1.2.RELEASE'
		springCloudDependenciesVersion = 'Greenwich.RELEASE'
		mariadbJavaClientVersion = '2.4.3'
		redissonVersion = '3.11.5'
		httpClientVersion = '4.5.13'
		httpAsyncClientVersion = '4.1.5'
		gsonVersion = '2.10'
		lmaxVersion = '3.4.4'
//		junit5Version = '5.3.2'
		junit5Version = '5.7.2'
//		junitPlatformVersion = '1.3.2'
		junitPlatformVersion = '1.7.2'
		mockitoVersion = '4.8.1'
		bytebuddyVersion = '1.12.18'
		assertjVersion = '3.23.1'
	}

	repositories {
		mavenCentral()
		jcenter()
	}

	dependencies {
		classpath("io.spring.gradle:dependency-management-plugin:${dependencyManagementPluginVersion}")
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id 'java'
	id 'java-library'
	id 'eclipse'
	id 'idea'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'org.springframework.boot' version '2.1.7.RELEASE'
}

dependencyManagement {
	imports {
		mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
		mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudDependenciesVersion}")
	}
}


repositories {
	mavenCentral()
	jcenter()
}

task copyDependencies(type: Copy) {
	//	from configurations.compileClasspath
	from configurations.runtimeClasspath
	into "${buildDir}/dependencies"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
[compileJava, javadoc, compileTestJava]*.options*.encoding = 'UTF-8'

configurations.all {
	exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
	exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

dependencies {
	api 'org.apache.commons:commons-math3:3.6.1'
	implementation 'com.google.guava:guava:27.0.1-jre'
	implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
	implementation 'org.springframework.plugin:spring-plugin-core:2.0.0.RELEASE'
	
//	implementation "org.springframework.boot:spring-boot-starter-jetty:${springBootVersion}"
//	implementation 'org.eclipse.jetty:apache-jsp:9.4.14.v20181114'
//	implementation 'javax.servlet:jstl:1.2'
//	implementation 'javax.servlet:javax.servlet-api:3.1.0'
	implementation "org.springframework.boot:spring-boot-starter-undertow:${springBootVersion}"

	implementation "org.springframework.boot:spring-boot-starter-log4j2:${springBootVersion}"

	implementation "io.springfox:springfox-boot-starter:${swaggerVersion}"
	implementation "com.github.xiaoymin:knife4j-spring-boot-starter:${knife4jVersion}"

	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

	implementation "org.springframework.cloud:spring-cloud-starter-consul-discovery:${springCloudVersion}"
	implementation "org.springframework.cloud:spring-cloud-starter-consul-config:${springCloudVersion}"

	implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
	implementation "org.mariadb.jdbc:mariadb-java-client:${mariadbJavaClientVersion}"

	implementation "org.springframework.boot:spring-boot-starter-data-redis:${springBootVersion}"
	implementation "org.springframework.session:spring-session-data-redis:${springBootVersion}"

	implementation 'org.apache.commons:commons-pool2:2.6.0'
	implementation "org.apache.commons:commons-lang3:${commonsLang3Version}"
	
	implementation "org.redisson:redisson-spring-boot-starter:${redissonVersion}"

	implementation "org.springframework.boot:spring-boot-starter-data-mongodb:${springBootVersion}"

	implementation "org.springframework.boot:spring-boot-starter-amqp:${springBootVersion}"

	implementation ("org.apache.httpcomponents:httpclient:${httpClientVersion}") {
		exclude group: 'commons-logging', module: 'commons-logging'
	}
	implementation ("org.apache.httpcomponents:httpmime:${httpClientVersion}") {
		exclude group: 'commons-logging', module: 'commons-logging'
	}
	
	implementation "com.google.code.gson:gson:${gsonVersion}"
	
	implementation ("org.apache.httpcomponents:httpasyncclient:${httpAsyncClientVersion}") {
		exclude group: 'commons-logging', module: 'commons-logging'
	}

    implementation "com.lmax:disruptor:${lmaxVersion}"

	implementation ("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
		//exclude group: 'junit', module: 'junit'
		exclude group: 'org.mockito', module: 'mockito-core'
		exclude group: 'net.bytebuddy', module: 'byte-buddy'
		exclude group: 'org.assertj', module: 'assertj-core'
	}
	
	testImplementation "org.mockito:mockito-core:${mockitoVersion}"
	testImplementation "org.mockito:mockito-inline:${mockitoVersion}"
	testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
	testImplementation "net.bytebuddy:byte-buddy:${bytebuddyVersion}"
	testImplementation "org.assertj:assertj-core:${assertjVersion}"
	testImplementation "org.junit.jupiter:junit-jupiter-api:${junit5Version}"
	testImplementation "org.junit.jupiter:junit-jupiter-params:${junit5Version}"
	testRuntimeOnly "org.junit.platform:junit-platform-commons:${junitPlatformVersion}"
	testRuntimeOnly "org.junit.platform:junit-platform-engine:${junitPlatformVersion}"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:${junitPlatformVersion}"
    testRuntimeOnly "org.junit.platform:junit-platform-reporting:${junitPlatformVersion}"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit5Version}"
	testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${junit5Version}"
}

test {
	useJUnitPlatform {
//		includeTags 'develop', 'prod'
	}
}

tasks.withType(Test).configureEach {
	def outputDir = reports.junitXml.outputLocation
	jvmArgumentProviders << ({
		[
			"-Djunit.platform.reporting.open.xml.enabled=true",
			"-Djunit.platform.reporting.output.dir=${outputDir.get().asFile.absolutePath}"
		]
	} as CommandLineArgumentProvider)
}

